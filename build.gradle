import java.text.SimpleDateFormat

// tag::versions[]
buildscript {
	dependencies {
		apply from: "versions.gradle"

		def depMgmtVersion = versions['dependency.management.plugin.version']

		classpath "io.spring.gradle:dependency-management-plugin:${depMgmtVersion}"
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
		classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
		classpath 'com.moowork.gradle:gradle-node-plugin:1.1.1'
		classpath 'org.ajoberstar:gradle-git-publish:0.2.1'
		classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5-rc1'
	}
}

wrapper {
	gradleVersion = '3.5'
}

ext {
	timestampedVersion = true
}

SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss")
if (ext.timestampedVersion) {
	version = BUILD_VERSION_PREFIX + "." + format.format(new Date())
}
else {
	version = '0.0.0-SNAPSHOT'
}
group = GROUP_ID

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

gradle.beforeProject { Project project ->
	project.with {
		apply plugin: 'maven'

		def docs = project.name == 'crnk-documentation'
		def ui = project.name == 'crnk-ui'
		def examples = project.name.contains('example')

		if (!docs) {
			apply plugin: 'java'
			sourceCompatibility = 1.7
			targetCompatibility = 1.7

			dependencies {
				testCompile group: 'junit', name: 'junit', version: '4.12'
				testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
				testCompile group: 'org.assertj', name: 'assertj-core', version: '2.2.0'
			}
		}

		if (!docs && !examples) {
			// https://about.sonarqube.com/get-started/
			apply plugin: "org.sonarqube"
		}

		apply plugin: 'maven-publish'

		if (System.env.NEXUS_DEPLOY_USER) {
			publishing {
				repositories {
					maven {
						name "nexus"
						url NEXUS_DEPLOY_URL

						credentials {
							username System.env.NEXUS_DEPLOY_USER
							password System.env.NEXUS_DEPLOY_PASS
						}
					}
				}

				if (!docs && !examples) {

					apply plugin: 'signing'
					signing {
						sign configurations.archives
					}

					publications {
						mavenJava(MavenPublication) {
							from components.java

							task sourceJar(type: Jar) {
								from sourceSets.main.allJava
								classifier = 'javadoc'
							}

							task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
								from javadoc.destinationDir
								classifier = 'javadoc'
							}

							artifact sourceJar {
								classifier "sources"
							}

							artifact packageJavadoc {
								classifier "javadoc"
							}

							pom.withXml {
								asNode().appendNode('description', 'JSON API framework for Java')
								asNode().appendNode('url', 'http://www.crnk.io')
								asNode().appendNode('name', project.name)

								def licenses = asNode().appendNode('licenses')
								def license = licenses.appendNode('license')
								license.appendNode('name', 'Apache License 2.0')
								license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.html')

								def issueManagement = asNode().appendNode('issueManagement')
								issueManagement.appendNode('system', 'GitHub')
								issueManagement.appendNode('url', 'https://github.com/crnk-project/crml-framework/issues')

								def scm = asNode().appendNode('scm')
								scm.appendNode('url', 'https://github.com/crnk-project/crnk-framework')
								scm.appendNode('connection', 'scm:git:git://github.com/crnk-project/crnk-framework.git')
								scm.appendNode('developerConnection', 'scm:git:git@github.com:crnk-project/crnk-framework.git')

								def developers = asNode().appendNode('developers')
								def developer = developers.appendNode('developer')
								developer.appendNode('id', 'crnk')
								developer.appendNode('email', 'info@crnk.io')



							}
						}
					}
				}
			}
		}

	}
}

